name: Deploy Enhanced Telegram Bot

on:
  push:
    branches:
      - "1"
  pull_request:
    branches:
      - "1"
  workflow_dispatch:
    inputs:
      timeout_minutes:
        description: 'Bot runtime timeout (minutes)'
        required: false
        default: '60'
        type: string
      log_level:
        description: 'Logging level'
        required: false
        default: 'INFO'
        type: choice
        options:
          - 'DEBUG'
          - 'INFO'
          - 'WARNING'
          - 'ERROR'

env:
  PYTHON_VERSION: '3.11'
  TIMEOUT_MINUTES: ${{ github.event.inputs.timeout_minutes || '60' }}

jobs:
  # Validation job to check code quality and secrets
  validate:
    runs-on: ubuntu-latest
    name: üîç Validate Code & Environment
    outputs:
      secrets-check: ${{ steps.secrets.outputs.all-set }}
    steps:
      - name: üì• Checkout Repository
        uses: actions/checkout@v4

      - name: üêç Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: üì¶ Cache Dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: üîß Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install flake8 black  # Code quality tools

      - name: üßπ Code Quality Check
        run: |
          echo "üîç Running code quality checks..."
          
          # Check Python syntax
          python -m py_compile main.py
          echo "‚úÖ Python syntax check passed"
          
          # Optional: Run flake8 for style check (non-blocking)
          flake8 main.py --max-line-length=100 --ignore=E203,W503 || echo "‚ö†Ô∏è Style warnings found (non-blocking)"

      - name: üîê Validate Environment Variables
        id: secrets
        env:
          API_ID: ${{ secrets.API_ID }}
          API_HASH: ${{ secrets.API_HASH }}
          BOT_TOKEN: ${{ secrets.BOT_TOKEN }}
          USERBOT_SESSION_STRING: ${{ secrets.USERBOT_SESSION_STRING }}
        run: |
          echo "üîç Checking required secrets..."
          
          missing_secrets=()
          
          if [ -z "$API_ID" ]; then
            missing_secrets+=("API_ID")
          else
            echo "‚úÖ API_ID is set"
          fi
          
          if [ -z "$API_HASH" ]; then
            missing_secrets+=("API_HASH")
          else
            echo "‚úÖ API_HASH is set"
          fi
          
          if [ -z "$BOT_TOKEN" ]; then
            missing_secrets+=("BOT_TOKEN")
          else
            echo "‚úÖ BOT_TOKEN is set"
          fi
          
          if [ -z "$USERBOT_SESSION_STRING" ]; then
            missing_secrets+=("USERBOT_SESSION_STRING")
          else
            echo "‚úÖ USERBOT_SESSION_STRING is set"
          fi
          
          if [ ${#missing_secrets[@]} -eq 0 ]; then
            echo "all-set=true" >> $GITHUB_OUTPUT
            echo "üéâ All required secrets are configured!"
          else
            echo "all-set=false" >> $GITHUB_OUTPUT
            echo "‚ùå Missing secrets: ${missing_secrets[*]}"
            echo ""
            echo "üìã To fix this, add the following secrets in your repository:"
            echo "   Settings ‚Üí Secrets and variables ‚Üí Actions ‚Üí Repository secrets"
            echo ""
            for secret in "${missing_secrets[@]}"; do
              echo "   ‚Ä¢ $secret"
            done
            exit 1
          fi

      - name: üìä Optional Secrets Check
        env:
          OWNER_ID: ${{ secrets.OWNER_ID }}
          MAX_MESSAGES: ${{ secrets.MAX_MESSAGES }}
          RATE_LIMIT_SECONDS: ${{ secrets.RATE_LIMIT_SECONDS }}
        run: |
          echo "üîç Checking optional configuration..."
          
          if [ -n "$OWNER_ID" ]; then
            echo "‚úÖ OWNER_ID is configured (admin features enabled)"
          else
            echo "‚ÑπÔ∏è OWNER_ID not set (admin features disabled)"
          fi
          
          if [ -n "$MAX_MESSAGES" ]; then
            echo "‚úÖ MAX_MESSAGES set to: $MAX_MESSAGES"
          else
            echo "‚ÑπÔ∏è MAX_MESSAGES using default (20)"
          fi
          
          if [ -n "$RATE_LIMIT_SECONDS" ]; then
            echo "‚úÖ RATE_LIMIT_SECONDS set to: $RATE_LIMIT_SECONDS"
          else
            echo "‚ÑπÔ∏è RATE_LIMIT_SECONDS using default (3)"
          fi

  # Main deployment job
  deploy:
    runs-on: ubuntu-latest
    needs: validate
    if: needs.validate.outputs.secrets-check == 'true'
    name: üöÄ Deploy Bot
    timeout-minutes: ${{ fromJson(env.TIMEOUT_MINUTES) }}
    
    steps:
      - name: üì• Checkout Repository
        uses: actions/checkout@v4

      - name: üêç Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: üì¶ Restore Dependencies Cache
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: üîß Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          echo "üì¶ Dependencies installed successfully"

      - name: üîç Pre-deployment Test
        env:
          API_ID: ${{ secrets.API_ID }}
          API_HASH: ${{ secrets.API_HASH }}
          BOT_TOKEN: ${{ secrets.BOT_TOKEN }}
          USERBOT_SESSION_STRING: ${{ secrets.USERBOT_SESSION_STRING }}
        run: |
          echo "üß™ Running pre-deployment validation..."
          
          # Test import and basic initialization
          python -c "
          import sys
          import os
          
          # Set environment variables
          os.environ['API_ID'] = '${{ secrets.API_ID }}'
          os.environ['API_HASH'] = '${{ secrets.API_HASH }}'
          os.environ['BOT_TOKEN'] = '${{ secrets.BOT_TOKEN }}'
          os.environ['USERBOT_SESSION_STRING'] = '${{ secrets.USERBOT_SESSION_STRING }}'
          
          try:
              # Test imports
              from pyrogram import Client
              print('‚úÖ Pyrogram import successful')
              
              # Test configuration loading
              exec(open('main.py').read().split('async def main()')[0])
              print('‚úÖ Configuration validation passed')
              
              print('üéâ Pre-deployment test completed successfully')
          except Exception as e:
              print(f'‚ùå Pre-deployment test failed: {e}')
              sys.exit(1)
          "

      - name: üìã Deployment Information
        run: |
          echo "üöÄ Starting bot deployment..."
          echo ""
          echo "üìä Configuration:"
          echo "   ‚Ä¢ Python Version: ${{ env.PYTHON_VERSION }}"
          echo "   ‚Ä¢ Timeout: ${{ env.TIMEOUT_MINUTES }} minutes"
          echo "   ‚Ä¢ Branch: ${{ github.ref_name }}"
          echo "   ‚Ä¢ Commit: ${{ github.sha }}"
          echo "   ‚Ä¢ Runner: ${{ runner.os }}"
          echo ""
          echo "‚è∞ Bot will run for maximum ${{ env.TIMEOUT_MINUTES }} minutes"
          echo "üîÑ Use workflow_dispatch to customize runtime"

      - name: ü§ñ Deploy Bot
        env:
          API_ID: ${{ secrets.API_ID }}
          API_HASH: ${{ secrets.API_HASH }}
          BOT_TOKEN: ${{ secrets.BOT_TOKEN }}
          USERBOT_SESSION_STRING: ${{ secrets.USERBOT_SESSION_STRING }}
          OWNER_ID: ${{ secrets.OWNER_ID }}
          MAX_MESSAGES: ${{ secrets.MAX_MESSAGES }}
          RATE_LIMIT_SECONDS: ${{ secrets.RATE_LIMIT_SECONDS }}
          LOG_LEVEL: ${{ github.event.inputs.log_level || 'INFO' }}
        run: |
          echo "üöÄ Starting Enhanced Telegram Bot..."
          echo "üìÖ Start Time: $(date)"
          echo "‚è∞ Timeout: ${{ env.TIMEOUT_MINUTES }} minutes"
          echo ""
          
          # Create a timeout mechanism
          timeout_seconds=$((${TIMEOUT_MINUTES:-60} * 60))
          
          # Run the bot with timeout
          timeout $timeout_seconds python main.py || {
            exit_code=$?
            echo ""
            echo "‚èπÔ∏è Bot execution finished"
            echo "üìÖ End Time: $(date)"
            
            if [ $exit_code -eq 124 ]; then
              echo "‚è∞ Bot stopped due to timeout (${TIMEOUT_MINUTES} minutes)"
              echo "‚úÖ This is normal for long-running bots in CI/CD"
            elif [ $exit_code -eq 130 ]; then
              echo "üõë Bot stopped by interrupt signal"
            else
              echo "‚ùå Bot stopped with exit code: $exit_code"
              exit $exit_code
            fi
          }

      - name: üìä Upload Logs
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: bot-logs-${{ github.run_number }}
          path: |
            bot.log
            *.log
          retention-days: 7

  # Notification job (runs regardless of success/failure)
  notify:
    runs-on: ubuntu-latest
    needs: [validate, deploy]
    if: always()
    name: üì¢ Deployment Summary
    
    steps:
      - name: üìä Deployment Summary
        run: |
          echo "üèÅ Deployment Summary"
          echo "===================="
          echo ""
          echo "üìã Job Results:"
          echo "   ‚Ä¢ Validation: ${{ needs.validate.result }}"
          echo "   ‚Ä¢ Deployment: ${{ needs.deploy.result }}"
          echo ""
          echo "üìÖ Completed: $(date)"
          echo "üîó Run: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          echo ""
          
          if [ "${{ needs.validate.result }}" == "success" ] && [ "${{ needs.deploy.result }}" == "success" ]; then
            echo "üéâ Deployment completed successfully!"
          elif [ "${{ needs.validate.result }}" == "failure" ]; then
            echo "‚ùå Validation failed - check your configuration and secrets"
          elif [ "${{ needs.deploy.result }}" == "failure" ]; then
            echo "‚ùå Deployment failed - check the logs for details"
          else
            echo "‚ö†Ô∏è Deployment completed with warnings"
          fi

# Workflow concurrency control
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true
